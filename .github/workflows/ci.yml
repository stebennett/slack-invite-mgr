name: CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Run backend tests
      working-directory: ./backend
      run: go test -v ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref_type == 'branch'
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-backend
        tags: |
          type=sha,format=short
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Sheets
      id: meta-sheets
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-sheets
        tags: |
          type=sha,format=short
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Sheets
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.sheets
        push: true
        tags: ${{ steps.meta-sheets.outputs.tags }}
        labels: ${{ steps.meta-sheets.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_short=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Extract metadata for API Release
      id: meta-api-release
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-backend
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=${{ steps.version.outputs.version_short }}
          type=raw,value=latest

    - name: Extract metadata for Sheets Release
      id: meta-sheets-release
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-sheets
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=${{ steps.version.outputs.version_short }}
          type=raw,value=latest

    - name: Build and push API Release
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-api-release.outputs.tags }}
        labels: ${{ steps.meta-api-release.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Sheets Release
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.sheets
        push: true
        tags: ${{ steps.meta-sheets-release.outputs.tags }}
        labels: ${{ steps.meta-sheets-release.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Release ${{ steps.version.outputs.version }}
          
          ### Docker Images
          
          **API Backend:**
          - `ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-backend:${{ steps.version.outputs.version }}`
          - `ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-backend:${{ steps.version.outputs.version_short }}`
          - `ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-backend:latest`
          
          **Sheets Service:**
          - `ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-sheets:${{ steps.version.outputs.version }}`
          - `ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-sheets:${{ steps.version.outputs.version_short }}`
          - `ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-sheets:latest`
          
          ### Usage
          
          ```bash
          # Pull the latest version
          docker pull ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-backend:latest
          docker pull ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-sheets:latest
          
          # Or pull a specific version
          docker pull ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-backend:${{ steps.version.outputs.version }}
          docker pull ghcr.io/${{ github.repository_owner }}/slack-invite-mgr-sheets:${{ steps.version.outputs.version }}
          ```
        draft: false
        prerelease: false 